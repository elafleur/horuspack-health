; -*- mode: clojure; -*-
; vim: filetype=clojure

(ns horus.health.config.main
  "General CPU, memory, disk and load monitoring."
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [horus.alert.config.main :refer [alert]]
            [horus.tslog.config.main :refer [time-series]]))

(streams
  ; package namespace tag
  (where (tagged "{{&ns-tag}}")

    ; time-series of memory usage %
    (match :service "memory"
      (with :collection "memory groupby_host"
        (changed-state {:init "ok"}
          (stable {{&dt}} :state
            (where (state "critical")
              (alert :level "severe"))
            (where (state "warning")
              (alert :level "moderate"))
            (where (state "ok")
              (alert :level "minor"))))
        (scale 100
          (time-series :groupby "host"))))

    ; time-series of cpu usage %
    (match :service "cpu"
      (with :collection "cpu groupby_host"
        (changed-state {:init "ok"}
          (stable {{&dt}} :state
            (where (state "critical")
              (alert :level "severe"))
            (where (state "warning")
              (alert :level "moderate"))
            (where (state "ok")
              (alert :level "minor"))))
        (scale 100
          (time-series :groupby "host"))))

    ; time-series of disk usage %
    (match :service "disk /"
      (with :collection "disk / groupby_host"
        (changed-state {:init "ok"}
          (stable {{&dt}} :state
            (where (state "critical")
              (alert :level "severe"))
            (where (state "warning")
              (alert :level "moderate"))
            (where (state "ok")
              (alert :level "minor"))))
        (scale 100
          (time-series :groupby "host"))))

    ; time-series of load usage
    (match :service "load"
      (with :collection "load groupby_host"
        (changed-state {:init "ok"}
          (stable {{&dt}} :state
            (where (state "critical")
              (alert :level "severe"))
            (where (state "warning")
              (alert :level "moderate"))
            (where (state "ok")
              (alert :level "minor"))))
        (time-series :groupby "host")))))
